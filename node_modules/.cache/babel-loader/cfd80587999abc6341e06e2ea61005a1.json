{"ast":null,"code":"var _jsxFileName = \"/Users/wang2_alan/Desktop/graphql-file-upload-example/client_app/upload-file/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloClient } from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nconst apolloCache = new InMemoryCache();\nconst uploadLink = createUploadLink({\n  uri: 'http://localhost:4000/',\n  // Apollo Server is served from port 4000\n  headers: {\n    \"keep-alive\": \"true\"\n  }\n});\nconst client = new ApolloClient({\n  cache: apolloCache,\n  link: uploadLink\n});\n\nconst fileUpload = ({\n  target: {\n    files\n  }\n}) => {\n  const file = files[0];\n  console.log(file);\n};\n\nconst UPLOAD_FILE = gql`\n  mutation singleUpload($file: Upload!) {\n    singleUpload(file: $file) {\n      filename\n      mimetype\n      encoding\n    }\n  }\n`;\nconst UPLOAD_FILE_STREAM = gql`\n  mutation SingleUploadStream($file: Upload!) {\n    singleUploadStream(file: $file) {\n      filename\n      mimetype\n      encoding\n    }\n  }\n`;\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }\n  }, \"src/App.js\"), \" and save to reload.\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Save Local\"), /*#__PURE__*/React.createElement(Mutation, {\n    mutation: UPLOAD_FILE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, (singleUpload, {\n    data,\n    loading\n  }) => {\n    console.log(data);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: fileUpload,\n      encType: 'multipart/form-data',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: 'document',\n      type: 'file',\n      onChange: ({\n        target: {\n          files\n        }\n      }) => {\n        const file = files;\n        file && singleUpload({\n          variables: {\n            file: file\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), loading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 27\n      }\n    }, \"Loading.....\"));\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Stream to Server\"), /*#__PURE__*/React.createElement(Mutation, {\n    mutation: UPLOAD_FILE_STREAM,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, (singleUploadStream, {\n    data,\n    loading\n  }) => {\n    console.log(data);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: fileUpload,\n      encType: 'multipart/form-data',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: 'document',\n      type: 'file',\n      onChange: ({\n        target: {\n          files\n        }\n      }) => {\n        const file = files[0];\n        console.log(file);\n        file && singleUploadStream({\n          variables: {\n            file: file\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), loading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 27\n      }\n    }, \"Loading.....\"));\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/wang2_alan/Desktop/graphql-file-upload-example/client_app/upload-file/src/App.js"],"names":["React","InMemoryCache","createUploadLink","ApolloClient","ApolloProvider","gql","Mutation","apolloCache","uploadLink","uri","headers","client","cache","link","fileUpload","target","files","file","console","log","UPLOAD_FILE","UPLOAD_FILE_STREAM","App","logo","singleUpload","data","loading","variables","singleUploadStream"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createUploadLink } from 'apollo-upload-client'\nimport {ApolloClient} from \"apollo-client\"\nimport {ApolloProvider} from \"react-apollo\"\nimport gql from \"graphql-tag\"\nimport { Mutation } from \"react-apollo\"\n\nconst apolloCache = new InMemoryCache()\n\nconst uploadLink = createUploadLink({\n  uri: 'http://localhost:4000/', // Apollo Server is served from port 4000\n  headers: {\n    \"keep-alive\": \"true\"\n  }\n})\n\nconst client = new ApolloClient({\n  cache: apolloCache,\n  link: uploadLink\n})\n\nconst fileUpload = ({target: { files }}) => {\n    const file = files[0]\n    console.log(file)\n}\n\nconst UPLOAD_FILE = gql`\n  mutation singleUpload($file: Upload!) {\n    singleUpload(file: $file) {\n      filename\n      mimetype\n      encoding\n    }\n  }\n`;\n\nconst UPLOAD_FILE_STREAM = gql`\n  mutation SingleUploadStream($file: Upload!) {\n    singleUploadStream(file: $file) {\n      filename\n      mimetype\n      encoding\n    }\n  }\n`;\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <h2>Save Local</h2>\n        <Mutation mutation={UPLOAD_FILE}>\n          {(singleUpload, { data, loading }) => {\n            console.log(data)\n            return (<form onSubmit={fileUpload} encType={'multipart/form-data'}>\n          <input name={'document'} type={'file'} onChange={({target: { files }}) => {\n            const file = files\n            file && singleUpload({ variables: { file: file } })\n          }}/>\n              {loading && <p>Loading.....</p>}\n          </form>)\n          }\n          }\n        </Mutation>\n        <h2>Stream to Server</h2>\n        <Mutation mutation={UPLOAD_FILE_STREAM}>\n          {(singleUploadStream, { data, loading }) => {\n            console.log(data)\n            return (<form onSubmit={fileUpload} encType={'multipart/form-data'}>\n          <input name={'document'} type={'file'} onChange={({target: { files }}) => {\n            const file = files[0]\n            console.log(file)\n            file && singleUploadStream({ variables: { file: file } })\n          }}/>\n              {loading && <p>Loading.....</p>}\n          </form>)\n          }\n          }\n        </Mutation>\n      </header>\n        </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}